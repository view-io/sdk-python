"""
View.IO SDK

This SDK provides a set of tools and functions to interact with the View.IO APIs. It simplifies the process of integrating View.IO's services into your application by making API requests, and processing responses.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Annotated, Self


class DataRepository(BaseModel):
    """
    DataRepository
    """  # noqa: E501

    id: Annotated[int, Field(strict=True, ge=1)] | None = Field(default=0, alias="Id")
    guid: StrictStr | None = Field(default=None, alias="GUID")
    tenant_guid: StrictStr | None = Field(default=None, alias="TenantGUID")
    owner_guid: StrictStr | None = Field(default=None, alias="OwnerGUID")
    name: StrictStr | None = Field(default="My file repository", alias="Name")
    repository_type: StrictStr | None = Field(default="File", alias="RepositoryType")
    use_ssl: StrictBool | None = Field(default=False, alias="UseSsl")
    include_subdirectories: StrictBool | None = Field(
        default=True, alias="IncludeSubdirectories"
    )
    disk_directory: StrictStr | None = Field(default=None, alias="DiskDirectory")
    s3_endpoint_url: StrictStr | None = Field(default=None, alias="S3EndpointUrl")
    s3_base_url: StrictStr | None = Field(default=None, alias="S3BaseUrl")
    s3_access_key: StrictStr | None = Field(default=None, alias="S3AccessKey")
    s3_secret_key: StrictStr | None = Field(default=None, alias="S3SecretKey")
    s3_bucket_name: StrictStr | None = Field(default=None, alias="S3BucketName")
    s3_region: StrictStr | None = Field(default=None, alias="S3Region")
    azure_endpoint_url: StrictStr | None = Field(default=None, alias="AzureEndpointUrl")
    azure_account_name: StrictStr | None = Field(default=None, alias="AzureAccountName")
    azure_container_name: StrictStr | None = Field(
        default=None, alias="AzureContainerName"
    )
    azure_access_key: StrictStr | None = Field(default=None, alias="AzureAccessKey")
    cifs_hostname: StrictStr | None = Field(default=None, alias="CifsHostname")
    cifs_username: StrictStr | None = Field(default=None, alias="CifsUsername")
    cifs_password: StrictStr | None = Field(default=None, alias="CifsPassword")
    cifs_share_name: StrictStr | None = Field(default=None, alias="CifsShareName")
    nfs_hostname: StrictStr | None = Field(default=None, alias="NfsHostname")
    nfs_user_id: Annotated[int, Field(strict=True, ge=0)] | None = Field(
        default=0, alias="NfsUserId"
    )
    nfs_group_id: Annotated[int, Field(strict=True, ge=0)] | None = Field(
        default=0, alias="NfsGroupId"
    )
    nfs_share_name: StrictStr | None = Field(default=None, alias="NfsShareName")
    nfs_version: StrictStr | None = Field(default=None, alias="NfsVersion")
    created_utc: datetime | None = Field(default=None, alias="CreatedUtc")
    __properties: ClassVar[list[str]] = [
        "Id",
        "GUID",
        "TenantGUID",
        "OwnerGUID",
        "Name",
        "RepositoryType",
        "UseSsl",
        "IncludeSubdirectories",
        "DiskDirectory",
        "S3EndpointUrl",
        "S3BaseUrl",
        "S3AccessKey",
        "S3SecretKey",
        "S3BucketName",
        "S3Region",
        "AzureEndpointUrl",
        "AzureAccountName",
        "AzureContainerName",
        "AzureAccessKey",
        "CifsHostname",
        "CifsUsername",
        "CifsPassword",
        "CifsShareName",
        "NfsHostname",
        "NfsUserId",
        "NfsGroupId",
        "NfsShareName",
        "NfsVersion",
        "CreatedUtc",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of DataRepository from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if disk_directory (nullable) is None
        # and model_fields_set contains the field
        if self.disk_directory is None and "disk_directory" in self.model_fields_set:
            _dict["DiskDirectory"] = None

        # set to None if s3_endpoint_url (nullable) is None
        # and model_fields_set contains the field
        if self.s3_endpoint_url is None and "s3_endpoint_url" in self.model_fields_set:
            _dict["S3EndpointUrl"] = None

        # set to None if s3_base_url (nullable) is None
        # and model_fields_set contains the field
        if self.s3_base_url is None and "s3_base_url" in self.model_fields_set:
            _dict["S3BaseUrl"] = None

        # set to None if s3_access_key (nullable) is None
        # and model_fields_set contains the field
        if self.s3_access_key is None and "s3_access_key" in self.model_fields_set:
            _dict["S3AccessKey"] = None

        # set to None if s3_secret_key (nullable) is None
        # and model_fields_set contains the field
        if self.s3_secret_key is None and "s3_secret_key" in self.model_fields_set:
            _dict["S3SecretKey"] = None

        # set to None if s3_bucket_name (nullable) is None
        # and model_fields_set contains the field
        if self.s3_bucket_name is None and "s3_bucket_name" in self.model_fields_set:
            _dict["S3BucketName"] = None

        # set to None if s3_region (nullable) is None
        # and model_fields_set contains the field
        if self.s3_region is None and "s3_region" in self.model_fields_set:
            _dict["S3Region"] = None

        # set to None if azure_endpoint_url (nullable) is None
        # and model_fields_set contains the field
        if (
            self.azure_endpoint_url is None
            and "azure_endpoint_url" in self.model_fields_set
        ):
            _dict["AzureEndpointUrl"] = None

        # set to None if azure_account_name (nullable) is None
        # and model_fields_set contains the field
        if (
            self.azure_account_name is None
            and "azure_account_name" in self.model_fields_set
        ):
            _dict["AzureAccountName"] = None

        # set to None if azure_container_name (nullable) is None
        # and model_fields_set contains the field
        if (
            self.azure_container_name is None
            and "azure_container_name" in self.model_fields_set
        ):
            _dict["AzureContainerName"] = None

        # set to None if azure_access_key (nullable) is None
        # and model_fields_set contains the field
        if (
            self.azure_access_key is None
            and "azure_access_key" in self.model_fields_set
        ):
            _dict["AzureAccessKey"] = None

        # set to None if cifs_hostname (nullable) is None
        # and model_fields_set contains the field
        if self.cifs_hostname is None and "cifs_hostname" in self.model_fields_set:
            _dict["CifsHostname"] = None

        # set to None if cifs_username (nullable) is None
        # and model_fields_set contains the field
        if self.cifs_username is None and "cifs_username" in self.model_fields_set:
            _dict["CifsUsername"] = None

        # set to None if cifs_password (nullable) is None
        # and model_fields_set contains the field
        if self.cifs_password is None and "cifs_password" in self.model_fields_set:
            _dict["CifsPassword"] = None

        # set to None if cifs_share_name (nullable) is None
        # and model_fields_set contains the field
        if self.cifs_share_name is None and "cifs_share_name" in self.model_fields_set:
            _dict["CifsShareName"] = None

        # set to None if nfs_hostname (nullable) is None
        # and model_fields_set contains the field
        if self.nfs_hostname is None and "nfs_hostname" in self.model_fields_set:
            _dict["NfsHostname"] = None

        # set to None if nfs_share_name (nullable) is None
        # and model_fields_set contains the field
        if self.nfs_share_name is None and "nfs_share_name" in self.model_fields_set:
            _dict["NfsShareName"] = None

        # set to None if nfs_version (nullable) is None
        # and model_fields_set contains the field
        if self.nfs_version is None and "nfs_version" in self.model_fields_set:
            _dict["NfsVersion"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of DataRepository from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "Id": obj.get("Id") if obj.get("Id") is not None else 0,
                "GUID": obj.get("GUID"),
                "TenantGUID": obj.get("TenantGUID"),
                "OwnerGUID": obj.get("OwnerGUID"),
                "Name": obj.get("Name")
                if obj.get("Name") is not None
                else "My file repository",
                "RepositoryType": obj.get("RepositoryType")
                if obj.get("RepositoryType") is not None
                else "File",
                "UseSsl": obj.get("UseSsl") if obj.get("UseSsl") is not None else False,
                "IncludeSubdirectories": obj.get("IncludeSubdirectories")
                if obj.get("IncludeSubdirectories") is not None
                else True,
                "DiskDirectory": obj.get("DiskDirectory"),
                "S3EndpointUrl": obj.get("S3EndpointUrl"),
                "S3BaseUrl": obj.get("S3BaseUrl"),
                "S3AccessKey": obj.get("S3AccessKey"),
                "S3SecretKey": obj.get("S3SecretKey"),
                "S3BucketName": obj.get("S3BucketName"),
                "S3Region": obj.get("S3Region"),
                "AzureEndpointUrl": obj.get("AzureEndpointUrl"),
                "AzureAccountName": obj.get("AzureAccountName"),
                "AzureContainerName": obj.get("AzureContainerName"),
                "AzureAccessKey": obj.get("AzureAccessKey"),
                "CifsHostname": obj.get("CifsHostname"),
                "CifsUsername": obj.get("CifsUsername"),
                "CifsPassword": obj.get("CifsPassword"),
                "CifsShareName": obj.get("CifsShareName"),
                "NfsHostname": obj.get("NfsHostname"),
                "NfsUserId": obj.get("NfsUserId")
                if obj.get("NfsUserId") is not None
                else 0,
                "NfsGroupId": obj.get("NfsGroupId")
                if obj.get("NfsGroupId") is not None
                else 0,
                "NfsShareName": obj.get("NfsShareName"),
                "NfsVersion": obj.get("NfsVersion"),
                "CreatedUtc": obj.get("CreatedUtc"),
            }
        )
        return _obj
