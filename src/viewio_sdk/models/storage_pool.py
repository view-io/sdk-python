"""
View.IO SDK

This SDK provides a set of tools and functions to interact with the View.IO APIs. It simplifies the process of integrating View.IO's services into your application by making API requests, and processing responses.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Annotated, Self

from viewio_sdk.models.compression_type_enum import CompressionTypeEnum
from viewio_sdk.models.object_write_mode_enum import ObjectWriteModeEnum


class StoragePool(BaseModel):
    """
    StoragePool
    """  # noqa: E501

    id: Annotated[int, Field(strict=True, ge=1)] | None = Field(
        default=None, alias="Id"
    )
    guid: StrictStr | None = Field(default=None, description="GUID", alias="GUID")
    tenant_guid: StrictStr | None = Field(default=None, alias="TenantGUID")
    encryption_key_guid: StrictStr | None = Field(
        default=None, alias="EncryptionKeyGUID"
    )
    name: StrictStr | None = Field(default=None, alias="Name")
    provider: StrictStr | None = Field(default=None, alias="Provider")
    write_mode: ObjectWriteModeEnum | None = Field(
        default=None, description="Object Write Mode", alias="WriteMode"
    )
    use_ssl: StrictBool | None = Field(
        default=False, description="Enable or disable SSL", alias="UseSsl"
    )
    endpoint: (
        Annotated[str, Field(min_length=1, strict=True, max_length=2083)] | None
    ) = Field(default=None, alias="Endpoint")
    access_key: StrictStr | None = Field(default=None, alias="AccessKey")
    secret_key: StrictStr | None = Field(default=None, alias="SecretKey")
    aws_region: StrictStr | None = Field(default=None, alias="AwsRegion")
    aws_bucket: StrictStr | None = Field(default=None, alias="AwsBucket")
    aws_base_domain: StrictStr | None = Field(default=None, alias="AwsBaseDomain")
    aws_base_url: StrictStr | None = Field(default=None, alias="AwsBaseUrl")
    disk_directory: StrictStr | None = Field(default=None, alias="DiskDirectory")
    azure_account: StrictStr | None = Field(default=None, alias="AzureAccount")
    azure_container: StrictStr | None = Field(default=None, alias="AzureContainer")
    compress: CompressionTypeEnum | None = Field(
        default=None, description="Compression Type", alias="Compress"
    )
    enable_read_caching: StrictBool | None = Field(
        default=False,
        description="Enable or disable read caching",
        alias="EnableReadCaching",
    )
    date_time: datetime | None = Field(default=None, alias="DateTime")
    __properties: ClassVar[list[str]] = [
        "Id",
        "GUID",
        "TenantGUID",
        "EncryptionKeyGUID",
        "Name",
        "Provider",
        "WriteMode",
        "UseSsl",
        "Endpoint",
        "AccessKey",
        "SecretKey",
        "AwsRegion",
        "AwsBucket",
        "AwsBaseDomain",
        "AwsBaseUrl",
        "DiskDirectory",
        "AzureAccount",
        "AzureContainer",
        "Compress",
        "EnableReadCaching",
        "DateTime",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of StoragePool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict["Id"] = None

        # set to None if tenant_guid (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_guid is None and "tenant_guid" in self.model_fields_set:
            _dict["TenantGUID"] = None

        # set to None if encryption_key_guid (nullable) is None
        # and model_fields_set contains the field
        if (
            self.encryption_key_guid is None
            and "encryption_key_guid" in self.model_fields_set
        ):
            _dict["EncryptionKeyGUID"] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict["Name"] = None

        # set to None if provider (nullable) is None
        # and model_fields_set contains the field
        if self.provider is None and "provider" in self.model_fields_set:
            _dict["Provider"] = None

        # set to None if endpoint (nullable) is None
        # and model_fields_set contains the field
        if self.endpoint is None and "endpoint" in self.model_fields_set:
            _dict["Endpoint"] = None

        # set to None if access_key (nullable) is None
        # and model_fields_set contains the field
        if self.access_key is None and "access_key" in self.model_fields_set:
            _dict["AccessKey"] = None

        # set to None if secret_key (nullable) is None
        # and model_fields_set contains the field
        if self.secret_key is None and "secret_key" in self.model_fields_set:
            _dict["SecretKey"] = None

        # set to None if aws_region (nullable) is None
        # and model_fields_set contains the field
        if self.aws_region is None and "aws_region" in self.model_fields_set:
            _dict["AwsRegion"] = None

        # set to None if aws_bucket (nullable) is None
        # and model_fields_set contains the field
        if self.aws_bucket is None and "aws_bucket" in self.model_fields_set:
            _dict["AwsBucket"] = None

        # set to None if aws_base_domain (nullable) is None
        # and model_fields_set contains the field
        if self.aws_base_domain is None and "aws_base_domain" in self.model_fields_set:
            _dict["AwsBaseDomain"] = None

        # set to None if aws_base_url (nullable) is None
        # and model_fields_set contains the field
        if self.aws_base_url is None and "aws_base_url" in self.model_fields_set:
            _dict["AwsBaseUrl"] = None

        # set to None if disk_directory (nullable) is None
        # and model_fields_set contains the field
        if self.disk_directory is None and "disk_directory" in self.model_fields_set:
            _dict["DiskDirectory"] = None

        # set to None if azure_account (nullable) is None
        # and model_fields_set contains the field
        if self.azure_account is None and "azure_account" in self.model_fields_set:
            _dict["AzureAccount"] = None

        # set to None if azure_container (nullable) is None
        # and model_fields_set contains the field
        if self.azure_container is None and "azure_container" in self.model_fields_set:
            _dict["AzureContainer"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of StoragePool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "Id": obj.get("Id"),
                "GUID": obj.get("GUID"),
                "TenantGUID": obj.get("TenantGUID"),
                "EncryptionKeyGUID": obj.get("EncryptionKeyGUID"),
                "Name": obj.get("Name"),
                "Provider": obj.get("Provider"),
                "WriteMode": obj.get("WriteMode"),
                "UseSsl": obj.get("UseSsl") if obj.get("UseSsl") is not None else False,
                "Endpoint": obj.get("Endpoint"),
                "AccessKey": obj.get("AccessKey"),
                "SecretKey": obj.get("SecretKey"),
                "AwsRegion": obj.get("AwsRegion"),
                "AwsBucket": obj.get("AwsBucket"),
                "AwsBaseDomain": obj.get("AwsBaseDomain"),
                "AwsBaseUrl": obj.get("AwsBaseUrl"),
                "DiskDirectory": obj.get("DiskDirectory"),
                "AzureAccount": obj.get("AzureAccount"),
                "AzureContainer": obj.get("AzureContainer"),
                "Compress": obj.get("Compress"),
                "EnableReadCaching": obj.get("EnableReadCaching")
                if obj.get("EnableReadCaching") is not None
                else False,
                "DateTime": obj.get("DateTime"),
            }
        )
        return _obj
