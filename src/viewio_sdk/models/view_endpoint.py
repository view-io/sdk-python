"""
View.IO SDK

This SDK provides a set of tools and functions to interact with the View.IO APIs. It simplifies the process of integrating View.IO's services into your application by making API requests, and processing responses.

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Self


class ViewEndpoint(BaseModel):
    """
    ViewEndpoint
    """  # noqa: E501

    guid: StrictStr | None = Field(default=None, alias="GUID")
    tenant_guid: StrictStr | None = Field(default=None, alias="TenantGUID")
    owner_guid: StrictStr | None = Field(default=None, alias="OwnerGUID")
    name: StrictStr | None = Field(default="My View endpoint", alias="Name")
    use_ssl: StrictBool | None = Field(default=False, alias="UseSsl")
    s3_url: StrictStr | None = Field(default="http://localhost:8002/", alias="S3Url")
    s3_uri: StrictStr | None = Field(default="http://localhost:8002/", alias="S3Uri")
    s3_base_url: StrictStr | None = Field(
        default="http://localhost:8002/{bucket}/{key}", alias="S3BaseUrl"
    )
    rest_url: StrictStr | None = Field(
        default="http://localhost:8001/", alias="RestUrl"
    )
    bucket_name: StrictStr | None = Field(default="data", alias="BucketName")
    region: StrictStr | None = Field(default="us-west-1", alias="Region")
    access_key: StrictStr | None = Field(default=None, alias="AccessKey")
    secret_key: StrictStr | None = Field(default=None, alias="SecretKey")
    api_key: StrictStr | None = Field(default=None, alias="ApiKey")
    created_utc: datetime | None = Field(default=None, alias="CreatedUtc")
    __properties: ClassVar[list[str]] = [
        "GUID",
        "TenantGUID",
        "OwnerGUID",
        "Name",
        "UseSsl",
        "S3Url",
        "S3Uri",
        "S3BaseUrl",
        "RestUrl",
        "BucketName",
        "Region",
        "AccessKey",
        "SecretKey",
        "ApiKey",
        "CreatedUtc",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self | None:
        """Create an instance of ViewEndpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: set[str] = set()

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if access_key (nullable) is None
        # and model_fields_set contains the field
        if self.access_key is None and "access_key" in self.model_fields_set:
            _dict["AccessKey"] = None

        # set to None if secret_key (nullable) is None
        # and model_fields_set contains the field
        if self.secret_key is None and "secret_key" in self.model_fields_set:
            _dict["SecretKey"] = None

        # set to None if api_key (nullable) is None
        # and model_fields_set contains the field
        if self.api_key is None and "api_key" in self.model_fields_set:
            _dict["ApiKey"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict[str, Any] | None) -> Self | None:
        """Create an instance of ViewEndpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "GUID": obj.get("GUID"),
                "TenantGUID": obj.get("TenantGUID"),
                "OwnerGUID": obj.get("OwnerGUID"),
                "Name": obj.get("Name")
                if obj.get("Name") is not None
                else "My View endpoint",
                "UseSsl": obj.get("UseSsl") if obj.get("UseSsl") is not None else False,
                "S3Url": obj.get("S3Url")
                if obj.get("S3Url") is not None
                else "http://localhost:8002/",
                "S3Uri": obj.get("S3Uri")
                if obj.get("S3Uri") is not None
                else "http://localhost:8002/",
                "S3BaseUrl": obj.get("S3BaseUrl")
                if obj.get("S3BaseUrl") is not None
                else "http://localhost:8002/{bucket}/{key}",
                "RestUrl": obj.get("RestUrl")
                if obj.get("RestUrl") is not None
                else "http://localhost:8001/",
                "BucketName": obj.get("BucketName")
                if obj.get("BucketName") is not None
                else "data",
                "Region": obj.get("Region")
                if obj.get("Region") is not None
                else "us-west-1",
                "AccessKey": obj.get("AccessKey"),
                "SecretKey": obj.get("SecretKey"),
                "ApiKey": obj.get("ApiKey"),
                "CreatedUtc": obj.get("CreatedUtc"),
            }
        )
        return _obj
